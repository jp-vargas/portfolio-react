// Generates brand font properties given a font type variation
//
// @param $weight {String} - The name of a font weight ('regular', 'medium', 'bold')
// @param $brand-font-regular {String} - The names of the regular font styles
// @param $brand-font-medium {String} - The names of the medium font styles
// @param $brand-font-bold {String} - The names of the bold font styles
//
// Usage:
//  @include font-type('regular');
@mixin font-type(
  $weight,
  $brand-font-regular: $brand-font-regular,
  $brand-font-medium: $brand-font-medium,
  $brand-font-bold: $brand-font-bold
) {
  $weights: (
    regular: (font-family: $brand-font-regular, font-weight: 400),
    medium: (font-family: $brand-font-medium, font-weight: 500),
    bold: (font-family: $brand-font-bold, font-weight: 700)
  );

  $selection: map-get($weights, $weight);

  @for $i from 1 through length($selection) {
    $property: nth(nth($selection, $i), 1);
    $value: nth(nth($selection, $i), 2);

    #{$property}: $value;
  }
}

// Generates the line height property given a ratio
//
// @param $ratio {String} - The name of a line height ratio ('display', 'text')
// @param $base-line-height {Float} - A valid CSS line-height value, used for 'text'
// @param $display-line-height {Float} - A valid CSS line-height value, used for 'display'
//
// Usage:
//  @include line-height('display');
@mixin line-height(
  $ratio,
  $base-line-height: $base-line-height,
  $display-line-height: $display-line-height
) {
  $ratios: (
    display: $display-line-height,
    text: $base-line-height
  );

  line-height: map-get($ratios, $ratio);
}

// Generates typography properties for an element
//
// @param $size {CSS Value [px]} - A font size value
// @param $options {Map} - A map of grid options
// @param $options.scale {String} - A valid font variation ('display', 'text', 'fixed')
// @param $options.leading {String} - A valid font variation ('display', 'text')
// @param $options.weight {String} - A valid font weight variation ('regular', 'medium', 'bold')
// @param $options.units {String} - Outputs font size values in 'rem' or 'em'
//
// @param $base-font-size {CSS Value [%, px]} - A base font size for relative unit calculation
// @param $font-scale-breakpoints {List [em]} - A list of breakpoints at which the font will increase per the font-scale
// @param $font-scale {List [px]} - A list of all possible font size values in ascending order
//
// Usage:
// @include font(18px);
// @include font(18px, (scale: 'display'));
// @include font(18px, (leading: 'display'));
// @include font(18px, (weight: 'bold'));
// @include font(18px, (units: 'em'));
// @include font(18px, (scale: 'display', weight: 'bold', units: 'em', leading: 'display'));
@mixin font(
  $size,
  $options: (),
  $base-font-size: $base-font-size,
  $font-scale-breakpoints: $font-scale-breakpoints,
  $font-scale: $font-scale
) {
  $scale: map-get($options, 'scale') or 'text';
  $font-weight: map-get($options, 'weight') or 'regular';
  $units: map-get($options, 'units') or 'rem';
  $line-height: map-get($options, 'leading') or 'text';

  @if ($scale == 'fixed') {
    @include line-height($line-height);
    @include font-type($font-weight);
    font-size: if(
      $units == 'em',
      em($size, $base-font-size),
      rem($size, $base-font-size)
    );
  } @else {
    @for $i from 1 through length($font-scale-breakpoints) {
      $breakpoint: nth($font-scale-breakpoints, $i);
      $scale-start-point: index($font-scale, $size);

      @include min-width-media-query($i, $font-scale-breakpoints) {
        // Display: font will scale +1 at first font breakpoint, then +2 at second
        @if ($scale == 'display') {
          $font-size: if(
            $i > 2,
            nth($font-scale, $scale-start-point + $i),
            nth($font-scale, $scale-start-point + $i - 1)
          );

          @include line-height('display');
          font-size: if(
            $units == 'em',
            em($font-size, $base-font-size),
            rem($font-size, $base-font-size)
          );
        }

        // Text: font will scale +1 at each of the 2 font breakpoints
        @if ($scale == 'text') {
          $font-size: nth($font-scale, $scale-start-point + $i - 1);

          @include line-height('text');
          font-size: if(
            $units == 'em',
            em($font-size, $base-font-size),
            rem($font-size, $base-font-size)
          );
        }

        @include font-type($font-weight);
      }
    }
  }
}
